#############################################################################
# .my.aliases
#############################################################################
# sudo apt-get install xdotool
function capsoff { xdotool key Caps_Lock; }
function CAPSOFF { xdotool key Caps_Lock; }

alias ssss='echo -ne "\033];${PWD}\007"'
export gao='72.42.76.135'

alias FS1='pushd /home/git/external/FlexSpec1'
alias NA1='pushd /home/git/external/SAS_NA1_3D_Spectrograph/V2-FS1Code/'

#PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
PROMPT_COMMAND='echo -ne "\033]0;${PWD}\007"'
export CVSROOT=:pserver:$USER@titan:/home/cvsroot
#export PYTHONPATH=$HOME/bin/python-user-dist

#echo my.aliases group 1

# grep -s be quiet about noisey messages
# mroe because I mistype more this way mroe often than I should


alias grep="grep -s"
alias h='history'
alias j='jobs -l'
alias liii='ls $iii'
alias lls='ls -ld $1'
alias ls='ls -FC'
alias ll='ls -lF'
alias lsd='file * | grep directory | grep -Eo "^.*:" | tr  ":" "/" | sort | column -x'
alias lsize="ls -l | sort -nr -k 5 | tac"
alias m=more
alias mroe=more
alias o="popd"
alias popd="popd"
alias psg="ps -eo \"%P %U %G %c \""
alias pwd='pwd -P'   # physical, full path irrespective of links
alias s='. ~/.titan.aliases'
alias u="pushd"
alias obs='cd ~/Observations && ls'

alias xiii='iii=`pwd`'
alias liii='ls $iii'
alias fv='fitsverify -l'
function fvl { 
   ~/bin/fitsverify -l $1 | less -i
}
function fvle { 
   ~/bin/fitsverify -e $1 | less -i
}

function today  { if test -d ~/aaaToday ; then cd ~/aaaToday; cd $(pwd); fi;
                }

function current  { if test -e ~/current; then cd ~/current; cd $(pwd); fi; }

alias psql93="psql --cluster 9.3/main $*"
alias psql96="psql --cluster 9.6/main $*"

alias ngsl='cd /home/git/external/private_NGSL_SAS'
alias ddd="pushd . ;cd \$dejour"
alias dddd="echo \$dejour"
dejour=/home/git/external/SAS_NA1_3D_Spectrograph/V2-FS1Code
alias oowriter='/usr/lib/libreoffice/program/soffice.bin --writer'
alias oocalc='/usr/lib/libreoffice/program/soffice.bin --calc'

function sublime () {
   export LANG=en_US.UTF-8 ;
   export LC_CTYPE=en_US.UTF-8;
   export LC_ALL=C.UTF-8 ;
  /opt/sublime_text/sublime_text $*
}

alias xephem='(cd /usr/local/xephem; /usr/local/bin/xephem > /dev/null 2>&1)'
function fixnames () { for f in *; do if [[ "$f" =~ " " ]] ; then mv "$f" ${f// /_} ; fi  ; done }

alias myterm='xgterm -font -*-fixed-medium-r-*-*-17-*-*-*-*-*-iso8859-* -sb -fg'

function pyfiles {
 file * | awk -F: '/Python.*ASCII/ {print $1;}' 
}

function nospaces { 
   (for f in *; do if [[ "$f" =~ " " ]] ; then mv "$f" ${f// /_} ; fi ; done)
   (shopt -s nullglob; for f in *.*.*fit    ; do mv  $f  ${f//./_}        ; done)
   (shopt -s nullglob; for f in *-*fit      ; do mv  $f  ${f//-/m}        ; done)
   (shopt -s nullglob; for f in *+*fit      ; do mv  $f  ${f//+/p}        ; done)
   (shopt -s nullglob; for f in *_fit       ; do mv  $f  ${f/%_fit/.fits} ; done)
   (shopt -s nullglob; for f in *.fit       ; do mv  $f  ${f/%.fit/.fits} ; done)
   (shopt -s nullglob; for f in *           ; do if test -f $f ; then chmod -x $f; fi; done)
}

function browser {  /opt/google/chrome/chrome --lang=en-US --new-window $* >/dev/null; }

alias iraf27="source activate iraf27"
alias pyraf="(export PYTHONSTARTUP=$HOME/iraf/pyraflogin.py; $HOME/anaconda3/envs/astrocondairaf/bin/pyraf -s; )"

function play { playpen="$HOME/play/$1";
                if test -e $playpen; then
                   pushd $playpen;
                else
                   echo "$1 not found"
                   pushd "$HOME/play/";
                fi
              }
                

function xxemacs {
   /usr/bin/emacs $* 2>/dev/null;
}

function emacsro {
   /usr/bin/emacs $* --eval '(progn (setq buffer-read-only t) (set-background-color "white"))' 2>/dev/null;
}

# in all unique file names in ~/.emacs.history look for string $1
function emhistory {
                     for f in $(awk '{print $3;}' ~/.emacs.history | tr -d '"' |  sort | uniq  ); do
                        if test -f $f ; then grep -Hins $1 $f; fi
                     done
                     }

# in unique file names passing a simple name filter $1, in ~/.emacs.history look for string $2
function emhistoryfilter {
                     for f in $(awk '{print $3;}' ~/.emacs.history | tr -d '"' | grep "$1" sort | uniq  ); do
                        if test -f $f ; then grep -Hins $2 $f; fi
                     done
                     }

function rrecent()            { find . -type f -mtime -2 | xargs ls -l --time-style=+%Y_%m_%d_%H.%M.%S | awk -e '{print $6,$7;}' | sort -r ; }

# cd to the directory of a a qualified path to a file;
function cdd()                { cd $(dirname $1);}
function udd()                { pushd $(dirname $1);}


# mv some.file to `timestamp`.some.file
# handy `timestamp` or $(timestamp) to add various
# timestampes to bash command line parts (filenames).
function timestamp()     { date --iso-8601=seconds | tr ":" "-" ; }
function jpldate()       { date +%d%b%Y; }
function jpldatetime()   { date +%d%b%Y_%H.%M.%S; }
function here()          { echo "$(date +%d%b%Y_%H.%M.%S) : $(pwd -P)" >> ~/.wayne/where; }
function where()         { tail $1 ~/.wayne/where; }

# capture CWD into the $dejour variable. update this script, next bash starts
# will see that value.

function xddd()               { sed -e "s,^dejour.*$,dejour=`pwd`,g" < ~/.titan.aliases >/tmp/alias
                                 mv ~/.titan.aliases ~/.my.aliases.`timestamp`
                                 mv /tmp/alias ~/.titan.aliases
                                 . ~/.titan.aliases
                                 export dejour=`pwd`
                              }

function tclsh() { rlwrap -c tclsh $*; }


# Make two lists pdffulltime.list with all in find order; and pdflist.list in reverse time
# order missing some common big file banks of everything below where command is run.
function pdflist()            {
      find $PWD -iname "*pdf" -exec ls -ld --time-style="+%Y-%m-%dT%H:%M:%S" \{} \; > pdffulltime.list;
      awk '/./ {print $6,$7;}' pdffulltime.list | sort -r | egrep -v '(boost|matplotlib|fitsblink)' >pdflist.list
}
function ..()                 { cd ../$1;            echo ""; }
function ...()                { cd ../../$1;         echo ""; }
function ....()               { cd ../../..$1;       echo ""; }
function .....()              { cd ../../../..$1;    echo ""; }
function ......()             { cd ../../../../..$1; echo ""; }

#----------------------------------------- CVS -----------------------------------------
function c             { a="$HOME/clones/";
                         if test "$1" == ""; then go=$a;
                         else
                            b="$1";
                            c="*";
                            go="$a$b$c";
                            echo $go;
                         fi
                         cd $go;
                       }
function addum()       { cvs add $*;  commitm ; }
function clone()       { if [ -z $1 ]; then pushd ~/Clones; ls; else  pushd ~/Clones/$**; pwd; fi; }
function clones()      { if [ -z $1 ]; then cd ~/Clones; ls; else  cd ~/Clones/$**; pwd; fi; }
function commitm()     { cvs commit -m "`timestamp` $1"; }
function diffum()      { cvs diff --brief ; }
function murder ()     { for p in $(ps aux | grep "$1" | awk '{print $2;}' ); do kill -9 $p; done; }

#----------------------------------------- git -----------------------------------------
function g1() { xx=$(find /home/git -maxdepth 2 -type d | grep -i "$1") ; }
function xxg()  { g1 "$1"; 
                xxaa=();
                for pp in $xx ; do xxaa+=($pp); done
                if [[ ${#xxaa[*]} > 1 ]] ; then
                    for _pp in _p; do echo $_pp; done
                else
                   cd $xx ;
                fi
              }

function g()  { if test "$1" == ""; then
                   cd /home/git/external
                else
                   g1 "$1"; 
                   echo $xx ;
                fi
              }




function olgg             { a="/home/git/clones/";
                         shopt -s globstar
                         if [[ "$1" =~ "smtsci_iraf" ]]; then   # other places clones installed.
                            go="$HOME/iraf/smtsci_iraf"
                         elif [[ "$1" =~ "APO_NICFPS_Pipeline" ]]; then
                            go="$HOME/iraf/APO_NICFPS_Pipeline"
                         elif [[ "$1" =~ "ext" ]]; then
                            go="/home/git/external"
                         elif test "$1" == ""; then go=$a;
                         else
                            b="$1**/";
                            c="";
                            if test ! "$c" == "" ; then c="/$2"; fi;
                            go="$a$b$c";
                            #echo "adjusted target a" $a "b" $b "c" $c "go" $go;
                         fi
                         newgo=${go/.git/};
#echo "newgo" $newgo
                         cd $newgo
                         shopt -u globstar
                        }

function p             { a="/home/git/pre/";
                         shopt -s globstar
                         if [[ "$1" =~ "smtsci_iraf" ]]; then   # other places clones installed.
                            go="$HOME/iraf/smtsci_iraf"
                         elif [[ "$1" =~ "APO_NICFPS_Pipeline" ]]; then
                            go="$HOME/iraf/APO_NICFPS_Pipeline"
                         elif test "$1" == ""; then go=$a;
                         else
                            b="$1**/";
                            c="";
                            if test ! "$c" == "" ; then c="/$2"; fi;
                            go="$a$b$c";
                            #echo "adjusted target a" $a "b" $b "c" $c "go" $go;
                         fi
                         newgo=${go/.git/};
#echo "newgo" $newgo
                         cd $newgo
                         shopt -u globstar
                        }

function short () { cd ~/shorts/$1; cd $(pwd); }

# peek into archive files .tar.gz .zip etc to see if I
# want them to actually run. Some make a directory,
# some IDIOTS put things into the CWD!!!
# NASA IDIOTS think .gz files are just tar files!
function peek()               {   pfile="$1" ;
                                if [[ "$pfile" =~ "Configuration" ]]; then
                                   ufile="$pfile"
                                else
                                   if [[ ! -e "$1" ]] ; then
                                      ufile="$HOME/Configuration/$1"
                                   else
                                      ufile="$pfile"
                                   fi
                                fi
                                echo Looking for "$ufile"
                                ext=${ufile//*./};
                                case $ext in
                                tarz | taz | gz | tgz) tar tzf "$ufile" | head
                                    ;;
                                xz*) tar tJf "$ufile" | head
                                    ;;
                                bz*) tar tjf "$ufile" | head
                                    ;;
                                zip) unzip -l "$ufile" | head
                                    ;;
                                tar) tar tf  "$ufile" | head
                                    ;;
                                Z  ) echo "Uncompress has no peek ability."
                                    ;;
                                *)   echo $1 " do not understand how to take a peek. " ${1//*./}
                               esac;
                               echo -n "Unpack $ufile here? "
                               read -p "y/n [n]" ans
                               if [[ $ans == "y" ]]; then
                                   case $ext in
                                   tarz | taz | gz | tgz) tar xvzf "$ufile"
                                       ;;
                                   xz*) tar xvJf "$ufile"
                                       ;;
                                   bz*) tar xvjf "$ufile"
                                       ;;
                                   zip) unzip "$ufile"
                                       ;;
                                   tar) tar xvf  "$ufile"
                                       ;;
                                   Z  ) echo "Uncompress has no peek ability."
                                       ;;
                                   *)   echo $1 " do not understand how to take a peek. " ${1//*./}
                                  esac;

                               fi
                              }
# recent this directory
function r()                  { ls -lt $* | grep -v "[ ][.]" | head $RECENT_COUNT ; }
function recent()             { ls -lt $* | grep -v "[ ][.]" | head -25 ; }
# get the md5sums of regular files deep of this directory
function sumum()              { if [ ! -z $1 ]; then
                                    find `pwd` -type f -H -exec md5sum \{} \;  >> $1 &
                                else echo "error: usage: sumum <output file>";
                                fi
                              }
function shaum()              { if [ ! -z $1 ]; then
                                     find `pwd` -type f -H -exec sha1sum \{} \;  >> $1 &
                                 else echo "error: usage: sumum <output file>";
                                 fi
                              }

function seepath () { echo $PATH | tr ':' '\n'; }
# guard the /bin/dd function anyway  .

function dd                   { diff -w $1 `pwd` | less; }

# I HATE COLORS (can't see that blue too well anyway.
unset LS_COLORS

#echo .my.aliases prompts


# the prompt the way I like it.
function shortprompt {
   PROMPT_DIRTRIM=2 
   export PS1='(\j) \w [\!]...>'
}

if [ "$SSH_TTY" ]; then
   PS1='(\j) \h \w [\!] ';
else
   PS1='(\j) \w [\!] ';
#export PROMPT_DIRTRIM=3
fi

# if this thing runs as root give me a sign.
if [ "$HOME" == "/root" ]; then
PS1="$PS1 # "
fi

# when way down in a tree, shorten the prompt up.

function longprompt { if [ "$SSH_TTY" ]; then
PS1='(\j) \h \w [\!] ';
else
PS1='(\j) \w [\!] ';
fi;
}

# things I want exported:
# Some IDIOT thinks waking up on some cold curb other other than
# $HOME is NOT STUPID.
if [ "`pwd`" == "$HOME/Desktop" ]; then cd; fi

# some unixes pester you when mail shows up.
unset MAILCHECK  # stop pesky mail messages

# WARNING here HISTIGNORE '<space><tab>' lines starting with
# HISTIGNORE characters are not saved in history.
export HISTIGNORE="[ 	]*"

# make sure we have a $HOME/bin or force one.
if [[ ! "$PATH" =~  "$HOME/bin" ]] ; then
   if test ! -e $HOME/bin ; then mkdir -p $HOME/bin; fi; # add one
   export PATH=$PATH:$HOME/bin;                          # put on path
fi

# make the default editor the standard Unix vi and not some castrated
# wimp editor.
export EDITOR=/usr/bin/vi

# add a few places to look for man pages.
if [[ ! "$MANPATH" =~ "$HOME/local/man" ]] ; then
   export MANPATH=$MANPATH:$HOME/local/man;
fi


# make later bashes quit quoting shell vars.
if [[ `bash --version` =~ '4.2' ]] ; then shopt -s direxpand; fi

# maintain all history. Not restart each session
shopt -s histappend

# make ls treat [a-z] shell wildcards as case sensitive !!!YOU IDIOTS!!!
export LC_ALL=C
if test -e ~/.Aluminum.keycodes  ; then
   sudo bash -c "echo 3 > /sys/module/hid_apple/parameters/fnmode"
   if [ ! -e /sys/module/hid_apple ]; then sudo /sbin/modprobe -q hid_apple; fi;
   /usr/bin/setxkbmap -option "ctrl:nocaps"   # force caps as ctrl
   /usr/bin/xmodmap ~/.Aluminum.keycodes
   #echo .scorpius.alias implemented with ~/.Aluminum.keycodes.
else
   if test -e ~/.Xmodmap; then
      /usr/bin/xmodmap ~/.Xmodmap  # for other PC/generic keyboards
   fi
fi


#--------------------------------- Anaconda ---------------------------------

setxkbmap -option ctrl:nocaps


#echo .my.aliases done
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/wayne/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/wayne/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/wayne/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/wayne/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

	
#export PATH=/home/wayne/anaconda3/bin:$PATH
PS1='A (\j) \w [\!] ';

if test -e $HOME/.docker.aliases; then
   . $HOME/.docker.aliases
fi

if [[ ! "$PATH" =~ 2020/texmf-dist ]]; then
   PATH="$PATH:/usr/local/texlive/2020/bin/x86_64-linux"
fi

if [[ ! "$MANPATH" =~ 2020/texmf-dist ]]; then
   MANPATH="$MANPATH:/usr/local/texlive/2020/texmf-dist/doc/man"
fi

if [[ ! "$INFOPATH" =~ 2020/texmf-dist ]]; then
   INFOPATH="$INFOPATH:/usr/local/texlive/2020/texmf-dist/doc/info"
fi

